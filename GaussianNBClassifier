# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

import os
print(os.listdir("../input"))

# Any results you write to the current directory are saved as output.

['yelp_business_attributes.csv', 'yelp_business.csv', 'yelp_tip.csv', 'yelp_checkin.csv', 'yelp_business_hours.csv', 'Dataset_Challenge_Dataset_Agreement.pdf', 'yelp_user.csv', 'yelp_review.csv']

#Import libraries
import  matplotlib.pyplot  as plt
from datetime import date
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from scipy import stats

# Read in data
user_data = pd.read_csv("../input/yelp_user.csv")
print(user_data.head(2))

                  user_id   name  review_count yelping_since  \
0  JJ-aSuM4pCFPdkfoZ34q0Q  Chris            10    2013-09-24   
1  uUzsFQn_6cXDh6rPNGbIFA  Tiffy             1    2017-03-02   

                                             friends  useful  funny  cool  \
0  0njfJmB-7n84DlIgUByCNw, rFn3Xe3RqHxRSxWOU19Gpg...       0      0     0   
1                                               None       0      0     0   

   fans elite        ...          compliment_more  compliment_profile  \
0     0  None        ...                        0                   0   
1     0  None        ...                        0                   0   

   compliment_cute  compliment_list  compliment_note  compliment_plain  \
0                0                0                0                 0   
1                0                0                0                 0   

   compliment_cool  compliment_funny  compliment_writer  compliment_photos  
0                0                 0                  0                  0  
1                0                 0                  0                  0  

[2 rows x 22 columns]

# Created new dataframe based of relevant columns
clean_user_data = user_data[["user_id","elite","name","review_count", "yelping_since"]].copy()
print(clean_user_data.head(2))

                  user_id elite   name  review_count yelping_since
0  JJ-aSuM4pCFPdkfoZ34q0Q  None  Chris            10    2013-09-24
1  uUzsFQn_6cXDh6rPNGbIFA  None  Tiffy             1    2017-03-02

# Take out users who nevers reviewed anything
only_reviews_data = clean_user_data[clean_user_data.review_count != 0]
only_reviews_data.head(3)

	user_id 	elite 	name 	review_count 	yelping_since
0 	JJ-aSuM4pCFPdkfoZ34q0Q 	None 	Chris 	10 	2013-09-24
1 	uUzsFQn_6cXDh6rPNGbIFA 	None 	Tiffy 	1 	2017-03-02
2 	mBneaEEH5EMyxaVyqS-72A 	None 	Mark 	6 	2015-03-13

#Seperate user data between basic and elite users
elite_users = only_reviews_data[only_reviews_data.elite != "None"]
basic_users = only_reviews_data[only_reviews_data.elite == "None"]
elite_users["today"] = "2018-07-24"
basic_users["today"] = "2018-07-24"
elite_users["date_diff"] = pd.to_datetime(elite_users.today) - pd.to_datetime(elite_users.yelping_since)  
basic_users["date_diff"] = pd.to_datetime(basic_users.today) - pd.to_datetime(basic_users.yelping_since)
elite_users.head(5)
basic_users.head(5)

	user_id 	elite 	name 	review_count 	yelping_since 	today 	date_diff
0 	JJ-aSuM4pCFPdkfoZ34q0Q 	None 	Chris 	10 	2013-09-24 	2018-07-24 	1764 days
1 	uUzsFQn_6cXDh6rPNGbIFA 	None 	Tiffy 	1 	2017-03-02 	2018-07-24 	509 days
2 	mBneaEEH5EMyxaVyqS-72A 	None 	Mark 	6 	2015-03-13 	2018-07-24 	1229 days
3 	W5mJGs-dcDWRGEhAzUYtoA 	None 	Evelyn 	3 	2016-09-08 	2018-07-24 	684 days
4 	4E8--zUZO1Rr1IBK4_83fg 	None 	Lisa 	11 	2012-07-16 	2018-07-24 	2199 days

elite_users["name"].value_counts()

Jennifer      532
Jessica       471
Sarah         460
Michael       460
Chris         455
David         454
John          429
Michelle      423
Mike          384
Stephanie     371
Amanda        346
Amy           343
Lisa          318
Jason         306
Brian         299
Kevin         288
Melissa       285
Lauren        283
Rachel        280
Nicole        272
Mark          269
Laura         267
Emily         265
Ryan          263
Ashley        263
Andrew        261
Christina     252
Matt          251
Eric          249
Christine     248
             ... 
Perfecto        1
Kasem           1
Maronita        1
Ginevra         1
Ellaine         1
Thien-Nam       1
Yeonhwa         1
Roab            1
Azizah          1
Harley          1
Sibylle         1
Umesh           1
Laura Jean      1
Vencci          1
Ktimene         1
Ponchai         1
Robelle         1
Jacinda         1
Yehoy           1
Janye           1
Sherly          1
Raam            1
Akiliano        1
Sheryllyn       1
Anilee          1
Yasaman         1
Clairin         1
Kharima         1
Jona            1
Cornelis        1
Name: name, Length: 10922, dtype: int64

basic_users["name"].value_counts()

John                11334
David               10738
Michael             10644
Chris                9624
Mike                 9003
Jennifer             7955
Jessica              7057
Sarah                6631
Michelle             6493
Mark                 6363
Lisa                 6078
Jason                6040
Brian                6014
James                5795
J                    5588
Robert               5497
Steve                5328
Kevin                5272
Ashley               5224
Ryan                 5149
Jeff                 5027
Stephanie            4900
Scott                4895
Matt                 4886
Alex                 4853
Amy                  4849
Amanda               4845
Melissa              4823
Eric                 4750
Joe                  4704
                    ...  
Onew                    1
Aldrin Joseph           1
Pistol                  1
Putang                  1
davide                  1
Omnivore                1
Yinsu                   1
Elston                  1
Canada                  1
Aryes                   1
Pierre And Janie        1
Vanne                   1
Krys Krys               1
Bondilyn                1
Kanami                  1
Sheryllynne             1
Shannon-Rae             1
IYelp                   1
amelia                  1
Skraps                  1
Invernes                1
Hellllo                 1
Shuwei                  1
Yui Hong                1
Yaziri                  1
Dyrn                    1
Larry C.                1
Jovien                  1
Nzaria                  1
Gysel                   1
Name: name, Length: 110108, dtype: int64

only_reviews_data.head(3)

	user_id 	elite 	name 	review_count 	yelping_since
0 	JJ-aSuM4pCFPdkfoZ34q0Q 	None 	Chris 	10 	2013-09-24
1 	uUzsFQn_6cXDh6rPNGbIFA 	None 	Tiffy 	1 	2017-03-02
2 	mBneaEEH5EMyxaVyqS-72A 	None 	Mark 	6 	2015-03-13

#Create a column to label data whether they have been an elite user or not
only_reviews_data['status'] = np.where(only_reviews_data['elite']== "None", 'basic', 'elite')
only_reviews_data.head(3)
#Visualization of the amount of reviews written
plt.scatter(list(elite_users.index.values),elite_users['review_count'],c = "red", alpha = .25)
plt.scatter(list(basic_users.index.values),basic_users['review_count'],c = "blue", alpha = .25)
plt.show()

#Create your labels and label data
labels_names = only_reviews_data["status"].unique()
labels = only_reviews_data["status"]
print(labels_names)
print(labels[0:3])

['basic' 'elite']
0    basic
1    basic
2    basic
Name: status, dtype: object

#Create feature name and the features
feature_name = "review_count"
features = pd.DataFrame(only_reviews_data["review_count"])
print(feature_name)
print(features[0:10])

review_count
   review_count
0            10
1             1
2             6
3             3
4            11
5             9
6             2
7             1
8             7
9             3

# Split the data into training and testing sets
train, test, train_labels, test_labels = train_test_split(features,
                                                          labels,
                                                          test_size=0.33,
                                                          random_state=42)

# Initialize the classifier from sklearn
gnb = GaussianNB()

# Train our classifier using our data splits
model = gnb.fit(train, train_labels)

# Make predictions and show what the classifier predicted counts
preds = gnb.predict(test)
print(preds)
print(stats.itemfreq(preds))

['basic' 'basic' 'basic' ... 'basic' 'basic' 'basic']
[['basic' '419411']
 ['elite' '17783']]

print(accuracy_score(test_labels, preds))

0.9708870661536984

